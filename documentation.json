{
    "pipes": [],
    "interfaces": [
        {
            "name": "ICheckboxOption",
            "id": "interface-ICheckboxOption-ab6ff4043bb88872373f447bd4b8e754",
            "file": "src/app/components/radiobutton/radiobutton.component.ts",
            "type": "interface",
            "sourceCode": "import { Component, HostBinding, HostListener, Output, EventEmitter, Input, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-radiobutton',\n  templateUrl: './radiobutton.component.html',\n  styleUrls: ['./radiobutton.component.scss'],\n  host: {\n    \"[attr.tabindex]\": \"0\",\n  }\n})\nexport class RadiobuttonComponent implements OnInit {\n\n  private checked_: boolean;\n\n  @Input('disabled')\n  @HostBinding('class.disabled')\n  disabled: boolean;\n\n  @Input('option')\n  option: ICheckboxOption;\n\n  @Input('preSelected')\n  preSelected: boolean;\n\n  @Output('stateChanged')\n  stateChanged: EventEmitter<RadiobuttonComponent>;\n\n  @HostListener('keydown.enter', ['$event'])\n  @HostListener('keydown.space', ['$event'])\n  @HostListener('click', ['$event'])\n  private toggle(event: Event): void {\n    if (!this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n      this.checked = true;\n      this.stateChanged.next(this);\n    }\n  }\n\n  set checked(value: boolean) {\n    this.checked_ = value;\n  }\n\n  @HostBinding('class.checked')\n  get checked(): boolean {\n    return this.checked_;\n  }\n\n  constructor() {\n    this.checked = false;\n    this.disabled = false;\n    this.stateChanged = new EventEmitter<RadiobuttonComponent>();\n  }\n\n  ngOnInit() {\n    this.checkForPreSelection();\n  }\n\n  private checkForPreSelection() {\n    if (this.preSelected === true) {\n      this.checked = true;\n    }\n  }\n\n}\n\ninterface ICheckboxOption {\n  value: any;\n  label: string;\n}",
            "properties": [
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "value",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 68
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ICheckboxOption",
            "id": "interface-ICheckboxOption-f9cfcf06859484470ed6419c76e4a894-1",
            "file": "src/app/components/radiobutton-group/radiobutton-group.component.ts",
            "type": "interface",
            "sourceCode": "import { Component, Input, ViewChildren, Output, EventEmitter, HostBinding } from '@angular/core';\nimport { RadiobuttonComponent } from '../radiobutton/radiobutton.component';\n\n@Component({\n  selector: 'app-radiobutton-group',\n  templateUrl: './radiobutton-group.component.html',\n  styleUrls: ['./radiobutton-group.component.scss']\n})\nexport class RadiobuttonGroupComponent {\n\n  private selectedOption_: ICheckboxOption;\n\n  set selectedOption(value: ICheckboxOption) {\n    if (value !== this.selectedOption_) {\n      this.selectedOption_ = value;\n      this.optionSelected.next(value);\n    }\n  }\n\n  get selectedOption(): ICheckboxOption {\n    return this.selectedOption_;\n  }\n\n  @Input('disabled')\n  @HostBinding('class.disabled')\n  disabled: boolean;\n\n  @ViewChildren('radiobutton')\n  radiobuttons: RadiobuttonComponent[];\n\n  @Output('optionSelected')\n  optionSelected: EventEmitter<ICheckboxOption>;\n\n  @Input('stackedList')\n  @HostBinding('class.stackedList')\n  stackedList: boolean;\n\n  @Input('options')\n  options: ICheckboxOption[];\n\n  @Input('preSelectedOptionValue')\n  preSelectedOptionValue: any;\n\n  constructor() {\n    this.options = [];\n    this.stackedList = true;\n    this.disabled = false;\n    this.optionSelected = new EventEmitter<ICheckboxOption>();\n  }\n\n  optionClicked(selectedRadiobutton: RadiobuttonComponent): void {\n    this.uncheckOtherRadioboxes(selectedRadiobutton);\n    this.selectedOption = selectedRadiobutton.option;\n  }\n\n  checkForPreSelection(option: ICheckboxOption): boolean {\n    if(this.preSelectedOptionValue !== undefined && this.preSelectedOptionValue === option.value) {\n      return true;\n    }\n    return false;\n  }\n\n  private uncheckOtherRadioboxes(selectedRadiobutton: RadiobuttonComponent): void {\n    for (const radiobutton of this.radiobuttons) {\n      if (radiobutton !== selectedRadiobutton) {\n        radiobutton.checked = false;\n      }\n    }\n  }\n}\n\ninterface ICheckboxOption {\n  value: any;\n  label: string;\n}",
            "properties": [
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 74
                },
                {
                    "name": "value",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 73
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ICheckboxOption-1"
        }
    ],
    "injectables": [],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-b0dda38f970a6690b77b35dfb293b3ac",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\r\n\r\nexport class AppPage {\r\n  navigateTo(): Promise<unknown> {\r\n    return browser.get(browser.baseUrl) as Promise<unknown>;\r\n  }\r\n\r\n  getTitleText(): Promise<string> {\r\n    return element(by.css('app-root .content span')).getText() as Promise<string>;\r\n  }\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-7ba00de41fbf64ca824afd7d7f6ac904",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "testValue",
                    "defaultValue": "5",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "buttonWasClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "value",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent {\r\n\r\n  private testValue = 5;\r\n\r\n  log(value: any) {\r\n    console.log('demo page logs:', value);\r\n  }\r\n\r\n  buttonWasClicked() {\r\n    console.log('button was clicked (outside event)!', this.testValue);\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".example {\r\n    border: 2px dotted black;\r\n    padding: 50px;\r\n    \r\n    ul {\r\n        list-style-type: none;\r\n    }\r\n}",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"example\">\r\n  button:<br>\r\n  <app-button\r\n    (clicked)=\"buttonWasClicked()\"\r\n    [icon]=\"'fab fa-accessible-icon'\"\r\n    [type]=\"'primary'\"\r\n    [size]=\"'default'\"\r\n    [disabled]=\"false\"\r\n    >Save primary</app-button>\r\n  <app-button\r\n  (clicked)=\"buttonWasClicked()\"\r\n  [icon]=\"'fab fa-accessible-icon'\"\r\n  [type]=\"'primary'\"\r\n  [size]=\"'default'\"\r\n  [disabled]=\"true\"\r\n  >Save primary</app-button>\r\n  <br>\r\n  <app-button\r\n    (clicked)=\"buttonWasClicked()\"\r\n    [icon]=\"'fab fa-accessible-icon'\"\r\n    [type]=\"'secondary'\"\r\n    [size]=\"'default'\"\r\n    [disabled]=\"false\"\r\n    >Save secondary</app-button>\r\n  <app-button\r\n  (clicked)=\"buttonWasClicked()\"\r\n  [icon]=\"'fab fa-accessible-icon'\"\r\n  [type]=\"'secondary'\"\r\n  [size]=\"'default'\"\r\n  [disabled]=\"true\"\r\n  >Save secondary</app-button>\r\n  <br>\r\n  <app-button\r\n    (clicked)=\"buttonWasClicked()\"\r\n    [icon]=\"'fab fa-accessible-icon'\"\r\n    [type]=\"'tertiary'\"\r\n    [size]=\"'default'\"\r\n    [disabled]=\"false\"\r\n    >Save tertiary</app-button>\r\n  <app-button\r\n  (clicked)=\"buttonWasClicked()\"\r\n  [icon]=\"'fab fa-accessible-icon'\"\r\n  [type]=\"'tertiary'\"\r\n  [size]=\"'default'\"\r\n  [disabled]=\"true\"\r\n  >Save tertiary</app-button>\r\n  <br>\r\n  <app-button\r\n    (clicked)=\"buttonWasClicked()\"\r\n    [icon]=\"'fab fa-accessible-icon'\"\r\n    [type]=\"'ghost'\"\r\n    [size]=\"'default'\"\r\n    [disabled]=\"false\"\r\n    >Save ghost</app-button>\r\n  <app-button\r\n  (clicked)=\"buttonWasClicked()\"\r\n  [icon]=\"'fab fa-accessible-icon'\"\r\n  [type]=\"'ghost'\"\r\n  [size]=\"'default'\"\r\n  [disabled]=\"true\"\r\n  >Save ghost</app-button>\r\n  <br>\r\n  <app-button\r\n    (clicked)=\"buttonWasClicked()\"\r\n    [icon]=\"'fab fa-accessible-icon'\"\r\n    [type]=\"'danger'\"\r\n    [size]=\"'default'\"\r\n    [disabled]=\"false\"\r\n    >Save danger</app-button>\r\n  <app-button\r\n  (clicked)=\"buttonWasClicked()\"\r\n  [icon]=\"'fab fa-accessible-icon'\"\r\n  [type]=\"'danger'\"\r\n  [size]=\"'default'\"\r\n  [disabled]=\"true\"\r\n  >Save danger</app-button>\r\n</div>\r\n<div class=\"example\">\r\n  <app-button-group>\r\n    <app-button [icon]=\"'fab fa-accessible-icon'\">primary</app-button>\r\n    <app-button [type]=\"'secondary'\" [icon]=\"'fab fa-accessible-icon'\">secondary 1</app-button>\r\n    <app-button [type]=\"'secondary'\" [icon]=\"'fab fa-accessible-icon'\">secondary 2</app-button>\r\n  </app-button-group>\r\n</div>\r\n<div class=\"example\">\r\n  <app-radiobutton-group [preSelectedOptionValue]=\"'d'\" [options]=\"[{value: 'm', label: 'male'},{value: 'f', label: 'female'},{value: 'd', label: 'diverse'}]\" (optionSelected)=\"log($event)\">Select Gender:</app-radiobutton-group>\r\n  <br>\r\n</div>\r\n\r\n<div class=\"example\">\r\n  <h2>Checkbox (nested):</h2>\r\n  <ul>\r\n    <li>\r\n      <app-checkbox #parent1>parent1</app-checkbox>\r\n      <ul>\r\n        <li>\r\n          <app-checkbox [parent]=\"parent1\">parent2</app-checkbox>\r\n        </li>\r\n        <li>\r\n          <app-checkbox [parent]=\"parent1\" #parent2>parent3</app-checkbox>\r\n          <ul>\r\n            <li>\r\n              <app-checkbox [parent]=\"parent2\">child1</app-checkbox>\r\n            </li>\r\n            <li>\r\n              <app-checkbox [parent]=\"parent2\">child2</app-checkbox>\r\n            </li>\r\n          </ul>\r\n        </li>\r\n      </ul>\r\n    </li>\r\n  </ul>\r\n</div>\r\n\r\n<div class=\"example\">\r\n  <h2>Checkbox:</h2>\r\n  <app-checkbox (stateChanged)=\"log($event)\">Default state</app-checkbox><br>\r\n  <app-checkbox (stateChanged)=\"log($event)\" [state]=\"'checked'\">State: checked</app-checkbox><br>\r\n  <app-checkbox (stateChanged)=\"log($event)\" [state]=\"'intermediate'\">State: intermediate</app-checkbox><br>\r\n  <app-checkbox (stateChanged)=\"log($event)\" [state]=\"'unchecked'\">State: unchecked</app-checkbox><br>\r\n  <br>\r\n  <app-checkbox (stateChanged)=\"log($event)\" [disabled]=\"true\">Default state (disabled)</app-checkbox><br>\r\n  <app-checkbox (stateChanged)=\"log($event)\" [disabled]=\"true\" [state]=\"'checked'\">State: checked (disabled)</app-checkbox><br>\r\n  <app-checkbox (stateChanged)=\"log($event)\" [disabled]=\"true\" [state]=\"'intermediate'\">State: intermediate (disabled)</app-checkbox><br>\r\n  <app-checkbox (stateChanged)=\"log($event)\" [disabled]=\"true\" [state]=\"'unchecked'\">State: unchecked (disabled)</app-checkbox>\r\n</div>\r\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-4ced382c9591ff7edaff21669d8ec067",
            "file": "src/app/components/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-button",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "line": 27,
                    "type": "boolean"
                },
                {
                    "name": "icon",
                    "line": 14,
                    "type": "string"
                },
                {
                    "name": "size",
                    "line": 11,
                    "type": "buttonSize"
                },
                {
                    "name": "type",
                    "line": 17,
                    "type": "buttonType"
                }
            ],
            "outputsClass": [
                {
                    "name": "clicked",
                    "line": 49,
                    "type": "EventEmitter<Event>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [
                {
                    "name": "class",
                    "line": 20,
                    "type": "string[]"
                }
            ],
            "hostListeners": [
                {
                    "name": "keydown.enter",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event"
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 40
                }
            ],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, HostBinding, HostListener, Output, EventEmitter, ElementRef } from '@angular/core';\n\n@Component({\n  selector: 'app-button',\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.scss'],\n})\nexport class ButtonComponent {\n\n  @Input('size')\n  size: buttonSize;\n\n  @Input('icon')\n  icon: string;\n\n  @Input('type')\n  type: buttonType;\n\n  @HostBinding('class')\n  private get classes(): string[] {\n    const type = `type-${this.type}`;\n    const size = `size-${this.size}`;\n    return [type, size];\n  }\n\n  @Input('disabled')\n  set disabled(value: boolean) {\n    if(value) {\n      this.elementRef.nativeElement.classList.add('disabled');\n      this.elementRef.nativeElement.removeAttribute('tabindex');\n    } else {\n      this.elementRef.nativeElement.classList.remove('disabled');\n      this.elementRef.nativeElement.setAttribute('tabindex', '0');\n    }\n  }\n\n  @HostListener('keydown.enter', ['$event'])\n  @HostListener('keydown.space', ['$event'])\n  @HostListener('click', ['$event'])\n  private execute(event: Event) {\n    if(!this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n      this.clicked.next(event);\n    }\n  }\n\n  @Output('clicked')\n  clicked: EventEmitter<Event>;\n\n  constructor(private elementRef: ElementRef<HTMLElement>) {\n    this.disabled = false;\n    this.type = 'primary';\n    this.size = 'default';\n    this.clicked = new EventEmitter<Event>();\n  }\n\n}\n\ntype buttonType = 'primary' | 'secondary' | 'tertiary' | 'ghost' | 'danger';\ntype buttonSize = 'default' | 'inline' | 'small';\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'styleguide-variables/styles/variables.scss';\r\n\r\n:host {\r\n    white-space: nowrap;\r\n    cursor: pointer;\r\n    user-select: none;\r\n    display: inline-flex;\r\n    align-items: center;\r\n    margin: 1rem;\r\n\r\n    padding-left: $spacing-05;\r\n    padding-right: $spacing-05;\r\n\r\n    &:focus {\r\n        outline: none;\r\n    }\r\n\r\n    &.disabled {\r\n        cursor: not-allowed;\r\n    }\r\n\r\n    &.size-default {\r\n        height: 3rem;\r\n    }\r\n    &.size-inline {\r\n        height: 2.5rem;\r\n    }\r\n    &.size-small {\r\n        height: 2rem;\r\n    }\r\n\r\n    i {\r\n        width: 16px;\r\n        height: 16px;\r\n        margin-left: $spacing-05;\r\n    }\r\n}\r\n\r\n// themes\r\n@each $themeName, $theme in $themes {\r\n    .theme-#{$themeName} {\r\n        :host {\r\n            @include body-short-01;\r\n\r\n            &.type-primary {\r\n                color: map-get($theme, text-04);\r\n                background-color: map-get($theme, interactive-01);\r\n\r\n                &:focus {\r\n                    box-shadow: 0 0 0 2px map-get($theme, focus);\r\n                }\r\n    \r\n                &:hover {\r\n                    background-color: map-get($theme, hover-primary);\r\n                }\r\n\r\n                &:active {\r\n                    background-color: map-get($theme, active-primary);\r\n                }\r\n    \r\n                &.disabled {\r\n                    background-color: map-get($theme, disabled-02);\r\n                    color: map-get($theme, disabled-03);\r\n                }\r\n    \r\n                i {\r\n                    color: map-get($theme, icon-03); \r\n                }\r\n            }\r\n\r\n            &.type-secondary {\r\n                color: map-get($theme, text-04);\r\n                background-color: map-get($theme, interactive-02);\r\n\r\n                &:focus {\r\n                    box-shadow: 0 0 0 2px map-get($theme, focus);\r\n                }\r\n    \r\n                &:hover {\r\n                    background-color: map-get($theme, hover-secondary);\r\n                }\r\n\r\n                &:active {\r\n                    background-color: map-get($theme, active-secondary);\r\n                }\r\n    \r\n                &.disabled {\r\n                    background-color: map-get($theme, disabled-02);\r\n                    color: map-get($theme, disabled-03);\r\n                }\r\n    \r\n                i {\r\n                    color: map-get($theme, icon-03); \r\n                }\r\n            }\r\n\r\n            &.type-tertiary {\r\n                color: map-get($theme, interactive-03);\r\n                border: 1px solid map-get($theme, interactive-03);\r\n\r\n                &:focus {\r\n                    color: map-get($theme, inverse-01);\r\n                    background-color: map-get($theme, interactive-03);\r\n                    box-shadow: 0 0 0 2px map-get($theme, focus);\r\n\r\n                    i {\r\n                        color: map-get($theme, icon-03);\r\n                    }\r\n                }\r\n    \r\n                &:hover:not(.disabled) {\r\n                    color: map-get($theme, text-04);\r\n                    background-color: map-get($theme, hover-tertiary);\r\n\r\n                    i {\r\n                        color: map-get($theme, icon-03);\r\n                    }\r\n                }\r\n\r\n                &:active {\r\n                    color: map-get($theme, inverse-01);\r\n                }\r\n    \r\n                &.disabled {\r\n                    background-color: transparent;\r\n                    color: map-get($theme, disabled-02);\r\n                    border: 1px solid map-get($theme, disabled-02);\r\n                }\r\n    \r\n                i {\r\n                    color: map-get($theme, interactive-03); \r\n                }\r\n            }\r\n\r\n            &.type-ghost {\r\n                color: map-get($theme, link-01);\r\n\r\n                &:focus:not(.disabled) {\r\n                    box-shadow: 0 0 0 2px map-get($theme, focus);\r\n                }\r\n    \r\n                &:hover:not(.disabled) {\r\n                    color: map-get($theme, hover-primary-text);\r\n                    background-color: map-get($theme, hover-ui);\r\n\r\n                    i {\r\n                        color: map-get($theme, hover-primary-text);\r\n                    }\r\n                }\r\n\r\n                &:active:not(.disabled) {\r\n                    background-color: map-get($theme, active-ui);\r\n                }\r\n    \r\n                &.disabled {\r\n                    color: map-get($theme, disabled-02);\r\n\r\n                    i {\r\n                        color: map-get($theme, disabled-02);\r\n                    }\r\n                }\r\n    \r\n                i {\r\n                    color: map-get($theme, link-01); \r\n                }\r\n            }\r\n\r\n            &.type-danger {\r\n                color: map-get($theme, text-04);\r\n                background-color: map-get($theme, support-01);\r\n\r\n                &:focus {\r\n                    box-shadow: 0 0 0 2px map-get($theme, focus);\r\n                }\r\n    \r\n                &:hover {\r\n                    background-color: map-get($theme, hover-danger);\r\n                }\r\n\r\n                &:active {\r\n                    background-color: map-get($theme, active-danger);\r\n                }\r\n    \r\n                &.disabled {\r\n                    background-color: map-get($theme, disabled-02);\r\n                    color: map-get($theme, disabled-03);\r\n                }\r\n    \r\n                i {\r\n                    color: map-get($theme, icon-03); \r\n                }\r\n            }\r\n            \r\n        }\r\n    }\r\n}",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef<HTMLElement>"
                    }
                ],
                "line": 49,
                "jsdoctags": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef<HTMLElement>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "disabled": {
                    "name": "disabled",
                    "setSignature": {
                        "name": "disabled",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 27,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<ng-content></ng-content>-placeholder\n<i class=\"{{icon}}\" *ngIf=\"icon\"></i>"
        },
        {
            "name": "ButtonGroupComponent",
            "id": "component-ButtonGroupComponent-86c3b65c4b7337edffcf4f9d9471b4e3",
            "file": "src/app/components/button-group/button-group.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-button-group",
            "styleUrls": [
                "./button-group.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button-group.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-button-group',\n  templateUrl: './button-group.component.html',\n  styleUrls: ['./button-group.component.scss']\n})\nexport class ButtonGroupComponent {\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host ::ng-deep {\n    app-button:not(:first-of-type) {\n        margin-left: 0;\n    }\n}",
                    "styleUrl": "./button-group.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<ng-content></ng-content>"
        },
        {
            "name": "CheckboxComponent",
            "id": "component-CheckboxComponent-31ae6e91652024401e7657362da8d820",
            "file": "src/app/components/checkbox/checkbox.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-checkbox",
            "styleUrls": [
                "./checkbox.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./checkbox.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "line": 28,
                    "type": "boolean"
                },
                {
                    "name": "parent",
                    "line": 63,
                    "type": ""
                },
                {
                    "name": "state",
                    "line": 37,
                    "type": ""
                }
            ],
            "outputsClass": [
                {
                    "name": "stateChanged",
                    "line": 19,
                    "type": "EventEmitter<CheckboxState>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "childCheckboxes",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "isInitialized",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "childHasChanged",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73
                },
                {
                    "name": "notifyParentAboutChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 142
                },
                {
                    "name": "registerChild",
                    "args": [
                        {
                            "name": "checkbox",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "jsdoctags": [
                        {
                            "name": "checkbox",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerSelfOnParent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82
                },
                {
                    "name": "setChildrenState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 149
                },
                {
                    "name": "setOwnState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 134
                },
                {
                    "name": "unregisterChild",
                    "args": [
                        {
                            "name": "checkbox",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "jsdoctags": [
                        {
                            "name": "checkbox",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "unregisterSelfOnParent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88
                }
            ],
            "hostBindings": [
                {
                    "name": "class",
                    "line": 22,
                    "type": "CheckboxState"
                },
                {
                    "name": "class.disabled",
                    "line": 25,
                    "type": "boolean"
                }
            ],
            "hostListeners": [
                {
                    "name": "keydown.enter",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event"
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 124
                }
            ],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Output, EventEmitter, Input, HostListener, HostBinding, OnInit, OnDestroy, ElementRef } from '@angular/core';\r\n\r\nexport type CheckboxState = 'checked' | 'intermediate' | 'unchecked';\r\n\r\n@Component({\r\n  selector: 'app-checkbox',\r\n  templateUrl: './checkbox.component.html',\r\n  styleUrls: ['./checkbox.component.scss'],\r\n  host: {\r\n    \"[attr.tabindex]\": \"0\",\r\n  }\r\n})\r\nexport class CheckboxComponent implements OnInit, OnDestroy {\r\n\r\n  private isInitialized: boolean;\r\n  private childCheckboxes: this[];\r\n\r\n  @Output('stateChanged')\r\n  stateChanged: EventEmitter<CheckboxState>;\r\n\r\n  @HostBinding('class')\r\n  private state_: CheckboxState;\r\n\r\n  @HostBinding('class.disabled')\r\n  private disabled_: boolean;\r\n\r\n  @Input('disabled')\r\n  set disabled(value: boolean) {\r\n    this.disabled_ = value;\r\n  }\r\n\r\n  get disabled(): boolean {\r\n    return this.disabled_;\r\n  }\r\n\r\n  @Input('state')\r\n  set state(value: CheckboxState) {\r\n    if (this.state_ !== value) {\r\n      this.state_ = value;\r\n      if (this.isInitialized) {\r\n        this.stateChanged.next(this.state_);\r\n      }\r\n    }\r\n  }\r\n\r\n  get state(): CheckboxState {\r\n    return this.state_;\r\n  }\r\n\r\n  get isChecked(): boolean {\r\n    return this.state === 'checked';\r\n  }\r\n\r\n  get isIntermediate(): boolean {\r\n    return this.state === 'intermediate';\r\n  }\r\n\r\n  get isUnchecked(): boolean {\r\n    return this.state === 'unchecked';\r\n  }\r\n\r\n  @Input('parent')\r\n  parent: this;\r\n\r\n  constructor() {\r\n    this.isInitialized = false;\r\n    this.disabled = false;\r\n    this.childCheckboxes = [];\r\n    this.state = 'unchecked';\r\n    this.stateChanged = new EventEmitter<CheckboxState>();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.isInitialized = true;\r\n    this.registerSelfOnParent();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.unregisterSelfOnParent();\r\n  }\r\n\r\n  registerSelfOnParent(): void {\r\n    if (this.parent) {\r\n      this.parent.registerChild(this);\r\n    }\r\n  }\r\n\r\n  unregisterSelfOnParent(): void {\r\n    if (this.parent) {\r\n      this.parent.unregisterChild(this);\r\n    }\r\n  }\r\n\r\n  registerChild(checkbox: this): void {\r\n    this.childCheckboxes.push(checkbox);\r\n  }\r\n\r\n  unregisterChild(checkbox: this): void {\r\n    const index: number = this.childCheckboxes.indexOf(checkbox);\r\n    this.childCheckboxes.splice(index, 1);\r\n  }\r\n\r\n  childHasChanged(): void {\r\n    let checkedCount: number = 0;\r\n    for (const childCheckbox of this.childCheckboxes) {\r\n      if (childCheckbox.isChecked) {\r\n        checkedCount += 1;\r\n      } else if (childCheckbox.isIntermediate) {\r\n        checkedCount += 0.5;\r\n      }\r\n    }\r\n    if (checkedCount === 0) {\r\n      this.state_ = 'unchecked';\r\n    } else if (checkedCount === this.childCheckboxes.length) {\r\n      this.state_ = 'checked';\r\n    } else {\r\n      this.state_ = 'intermediate';\r\n    }\r\n  }\r\n\r\n  @HostListener('keydown.enter', ['$event'])\r\n  @HostListener('keydown.space', ['$event'])\r\n  @HostListener('click', ['$event'])\r\n  private toggle(event: Event): void {\r\n    if (!this.disabled) {\r\n      event.preventDefault();\r\n      event.stopImmediatePropagation();\r\n      this.setOwnState();\r\n      this.notifyParentAboutChanges();\r\n      this.setChildrenState();\r\n    }\r\n  }\r\n\r\n  setOwnState(): void {\r\n    if (this.state === 'unchecked') {\r\n      this.state = 'checked';\r\n    } else {\r\n      this.state = 'unchecked';\r\n    }\r\n  }\r\n\r\n  notifyParentAboutChanges(): void {\r\n    if (this.parent) {\r\n      this.parent.childHasChanged.call(this.parent);\r\n      this.parent.notifyParentAboutChanges.call(this.parent);\r\n    }\r\n  }\r\n\r\n  setChildrenState(): void {\r\n    if (this.childCheckboxes.length > 0) {\r\n      for (const childCheckbox of this.childCheckboxes) {\r\n        childCheckbox.state = this.state;\r\n        this.setChildrenState.call(childCheckbox);\r\n      }\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'styleguide-variables/styles/variables.scss';\r\n\r\n:host {\r\n    display: inline-grid;\r\n    grid-template-columns: max-content 1fr;\r\n    box-sizing: border-box;\r\n    padding: 0.125rem;\r\n    user-select: none;\r\n    cursor: pointer;\r\n    align-items: center;\r\n\r\n    &:focus {\r\n        outline: none;\r\n    }\r\n\r\n    div {\r\n        height: 1rem;\r\n        width: 1rem;\r\n        justify-content: center;\r\n        display: inline-flex;\r\n        align-items: center;\r\n    }\r\n\r\n    span:empty {\r\n        display: none;\r\n    }\r\n\r\n    span:not(:empty) {\r\n        @include body-short-01;\r\n        box-sizing: inherit;\r\n        padding-left: $spacing-03;\r\n        overflow: hidden;\r\n        text-overflow: ellipsis;\r\n        white-space: nowrap;\r\n    }\r\n\r\n    &.disabled {\r\n        cursor: not-allowed;\r\n    }\r\n\r\n    &.intermediate div {\r\n\r\n        &::before {\r\n            content: \"\";\r\n            display: block;\r\n            position: absolute;\r\n            width: 0.5rem;\r\n            height: 2px;\r\n        }\r\n    }\r\n    &.checked div {\r\n        \r\n        &::before {\r\n            content: \"\";\r\n            display: block;\r\n            position: absolute;\r\n            width: .5625rem;\r\n            height: .3125rem;\r\n            transform: rotate(-45deg) translateX(1px) translateY(-1px);\r\n        }\r\n    }\r\n}\r\n\r\n// themes\r\n@each $themeName, $theme in $themes {\r\n    .theme-#{$themeName} {\r\n        :host {\r\n            &:not(.disabled) {\r\n                div {\r\n                    border: 1px solid map-get($theme, ui-05);\r\n                }\r\n                span {\r\n                    color: map-get($theme, ui-05);\r\n                }\r\n\r\n                &:not(.unchecked) div {\r\n                    background-color: map-get($theme, ui-05);\r\n                }\r\n            }\r\n\r\n            &.disabled {\r\n                div {\r\n                    border: 1px solid map-get($theme, disabled-02);\r\n                }\r\n                span {\r\n                    color: map-get($theme, disabled-02);\r\n                }\r\n\r\n                &:not(.unchecked) div {\r\n                    background-color: map-get($theme, disabled-02);\r\n                }\r\n            }\r\n\r\n            &.intermediate div::before {\r\n                background-color: map-get($theme, inverse-01);\r\n            }\r\n\r\n            &.checked div::before {\r\n                border-left: 2px solid map-get($theme, inverse-01);\r\n                border-bottom: 2px solid map-get($theme, inverse-01);\r\n            }\r\n        }\r\n    }\r\n}",
                    "styleUrl": "./checkbox.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 63
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "disabled": {
                    "name": "disabled",
                    "setSignature": {
                        "name": "disabled",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 28,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "disabled",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 32
                    }
                },
                "state": {
                    "name": "state",
                    "setSignature": {
                        "name": "state",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 37,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "state",
                        "type": "",
                        "returnType": "CheckboxState",
                        "line": 46
                    }
                },
                "isChecked": {
                    "name": "isChecked",
                    "getSignature": {
                        "name": "isChecked",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 50
                    }
                },
                "isIntermediate": {
                    "name": "isIntermediate",
                    "getSignature": {
                        "name": "isIntermediate",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 54
                    }
                },
                "isUnchecked": {
                    "name": "isUnchecked",
                    "getSignature": {
                        "name": "isUnchecked",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 58
                    }
                }
            },
            "templateData": "<div></div>\r\n<span><ng-content></ng-content></span>"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-246e2a69dc126a3bd76c6328dd3b93e2",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 53,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 62,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 56,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 59,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-cca1a8911321fa17756ce90c90de65cc",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://www.learnstorybook.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn Storybook\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\">\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 66,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 75,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 69,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 72,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://www.learnstorybook.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn Storybook\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\">\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\n//   <article>\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\n\n// );\n// Page.propTypes = {\n//   user: PropTypes.shape({}),\n//   onLogin: PropTypes.func.isRequired,\n//   onLogout: PropTypes.func.isRequired,\n//   onCreateAccount: PropTypes.func.isRequired,\n// };\n\n// Page.defaultProps = {\n//   user: null,\n// };\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nh2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\np {\n  margin: 1em 0;\n}\n\na {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nli {\n  margin-bottom: 8px;\n}\n\n.tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "RadiobuttonComponent",
            "id": "component-RadiobuttonComponent-ab6ff4043bb88872373f447bd4b8e754",
            "file": "src/app/components/radiobutton/radiobutton.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-radiobutton",
            "styleUrls": [
                "./radiobutton.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./radiobutton.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "line": 17,
                    "type": "boolean"
                },
                {
                    "name": "option",
                    "line": 20,
                    "type": "ICheckboxOption"
                },
                {
                    "name": "preSelected",
                    "line": 23,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "stateChanged",
                    "line": 26,
                    "type": "EventEmitter<RadiobuttonComponent>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "checked_",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "checkForPreSelection",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55
                }
            ],
            "hostBindings": [
                {
                    "name": "class.checked",
                    "line": 45,
                    "type": "boolean"
                }
            ],
            "hostListeners": [
                {
                    "name": "keydown.enter",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event"
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 31
                }
            ],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, HostBinding, HostListener, Output, EventEmitter, Input, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-radiobutton',\n  templateUrl: './radiobutton.component.html',\n  styleUrls: ['./radiobutton.component.scss'],\n  host: {\n    \"[attr.tabindex]\": \"0\",\n  }\n})\nexport class RadiobuttonComponent implements OnInit {\n\n  private checked_: boolean;\n\n  @Input('disabled')\n  @HostBinding('class.disabled')\n  disabled: boolean;\n\n  @Input('option')\n  option: ICheckboxOption;\n\n  @Input('preSelected')\n  preSelected: boolean;\n\n  @Output('stateChanged')\n  stateChanged: EventEmitter<RadiobuttonComponent>;\n\n  @HostListener('keydown.enter', ['$event'])\n  @HostListener('keydown.space', ['$event'])\n  @HostListener('click', ['$event'])\n  private toggle(event: Event): void {\n    if (!this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n      this.checked = true;\n      this.stateChanged.next(this);\n    }\n  }\n\n  set checked(value: boolean) {\n    this.checked_ = value;\n  }\n\n  @HostBinding('class.checked')\n  get checked(): boolean {\n    return this.checked_;\n  }\n\n  constructor() {\n    this.checked = false;\n    this.disabled = false;\n    this.stateChanged = new EventEmitter<RadiobuttonComponent>();\n  }\n\n  ngOnInit() {\n    this.checkForPreSelection();\n  }\n\n  private checkForPreSelection() {\n    if (this.preSelected === true) {\n      this.checked = true;\n    }\n  }\n\n}\n\ninterface ICheckboxOption {\n  value: any;\n  label: string;\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'styleguide-variables/styles/variables.scss';\r\n\r\n:host {\r\n    display: inline-grid;\r\n    width: max-content;\r\n    grid-template-columns: max-content max-content;\r\n    cursor: pointer;\r\n    user-select: none;\r\n\r\n    &:focus {\r\n        outline: none;\r\n    }\r\n\r\n    div {\r\n        width: 1rem;\r\n        height: 1rem;\r\n        border-radius: 50%;\r\n    }\r\n\r\n    &.disabled {\r\n        cursor: not-allowed;\r\n    }\r\n\r\n    &.checked div::after {\r\n        content: \"\";\r\n        display: inline-block;\r\n        width: 100%;\r\n        height: 100%;\r\n        border-radius: 50%;\r\n        transform: scale(.5);\r\n    }\r\n\r\n    span {\r\n        @include body-short-01;\r\n        padding-left: $spacing-03;\r\n\r\n        &:empty {\r\n            display: none;\r\n        }\r\n    }\r\n}\r\n\r\n.stackedList :host {\r\n    display: grid;\r\n}\r\n\r\n// themes\r\n@each $themeName, $theme in $themes {\r\n    .theme-#{$themeName} {\r\n        :host {\r\n\r\n            &:focus:not(.disabled) div {\r\n                box-shadow: 0 0 0 2px map-get($theme, focus);\r\n            }\r\n            div {\r\n                border: 1px solid map-get($theme, ui-05);\r\n            }\r\n            span {\r\n                color: map-get($theme, text-01);\r\n            }\r\n            \r\n            &.disabled {\r\n                div {\r\n                    border: 1px solid map-get($theme, disabled-02);\r\n                }\r\n                span {\r\n                    color: map-get($theme, disabled-02);\r\n                }\r\n            }\r\n\r\n            &.checked {\r\n                div::after {\r\n                    background-color: map-get($theme, ui-05);\r\n                }\r\n\r\n                &.disabled {\r\n                    div::after {\r\n                        background-color: map-get($theme, disabled-02);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
                    "styleUrl": "./radiobutton.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 47
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "checked": {
                    "name": "checked",
                    "setSignature": {
                        "name": "checked",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 40,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<div></div>\n<span>{{option.label}}</span>"
        },
        {
            "name": "RadiobuttonGroupComponent",
            "id": "component-RadiobuttonGroupComponent-f9cfcf06859484470ed6419c76e4a894",
            "file": "src/app/components/radiobutton-group/radiobutton-group.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-radiobutton-group",
            "styleUrls": [
                "./radiobutton-group.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./radiobutton-group.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "line": 26,
                    "type": "boolean"
                },
                {
                    "name": "options",
                    "line": 39,
                    "type": "ICheckboxOption[]"
                },
                {
                    "name": "preSelectedOptionValue",
                    "line": 42,
                    "type": "any"
                },
                {
                    "name": "stackedList",
                    "line": 36,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "optionSelected",
                    "line": 32,
                    "type": "EventEmitter<ICheckboxOption>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "radiobuttons",
                    "type": "RadiobuttonComponent[]",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "decorators": [
                        {
                            "name": "ViewChildren",
                            "stringifiedArguments": "'radiobutton'"
                        }
                    ]
                },
                {
                    "name": "selectedOption_",
                    "type": "ICheckboxOption",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "checkForPreSelection",
                    "args": [
                        {
                            "name": "option",
                            "type": "ICheckboxOption"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 56,
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "ICheckboxOption",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "optionClicked",
                    "args": [
                        {
                            "name": "selectedRadiobutton",
                            "type": "RadiobuttonComponent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "jsdoctags": [
                        {
                            "name": "selectedRadiobutton",
                            "type": "RadiobuttonComponent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "uncheckOtherRadioboxes",
                    "args": [
                        {
                            "name": "selectedRadiobutton",
                            "type": "RadiobuttonComponent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "selectedRadiobutton",
                            "type": "RadiobuttonComponent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewChildren, Output, EventEmitter, HostBinding } from '@angular/core';\nimport { RadiobuttonComponent } from '../radiobutton/radiobutton.component';\n\n@Component({\n  selector: 'app-radiobutton-group',\n  templateUrl: './radiobutton-group.component.html',\n  styleUrls: ['./radiobutton-group.component.scss']\n})\nexport class RadiobuttonGroupComponent {\n\n  private selectedOption_: ICheckboxOption;\n\n  set selectedOption(value: ICheckboxOption) {\n    if (value !== this.selectedOption_) {\n      this.selectedOption_ = value;\n      this.optionSelected.next(value);\n    }\n  }\n\n  get selectedOption(): ICheckboxOption {\n    return this.selectedOption_;\n  }\n\n  @Input('disabled')\n  @HostBinding('class.disabled')\n  disabled: boolean;\n\n  @ViewChildren('radiobutton')\n  radiobuttons: RadiobuttonComponent[];\n\n  @Output('optionSelected')\n  optionSelected: EventEmitter<ICheckboxOption>;\n\n  @Input('stackedList')\n  @HostBinding('class.stackedList')\n  stackedList: boolean;\n\n  @Input('options')\n  options: ICheckboxOption[];\n\n  @Input('preSelectedOptionValue')\n  preSelectedOptionValue: any;\n\n  constructor() {\n    this.options = [];\n    this.stackedList = true;\n    this.disabled = false;\n    this.optionSelected = new EventEmitter<ICheckboxOption>();\n  }\n\n  optionClicked(selectedRadiobutton: RadiobuttonComponent): void {\n    this.uncheckOtherRadioboxes(selectedRadiobutton);\n    this.selectedOption = selectedRadiobutton.option;\n  }\n\n  checkForPreSelection(option: ICheckboxOption): boolean {\n    if(this.preSelectedOptionValue !== undefined && this.preSelectedOptionValue === option.value) {\n      return true;\n    }\n    return false;\n  }\n\n  private uncheckOtherRadioboxes(selectedRadiobutton: RadiobuttonComponent): void {\n    for (const radiobutton of this.radiobuttons) {\n      if (radiobutton !== selectedRadiobutton) {\n        radiobutton.checked = false;\n      }\n    }\n  }\n}\n\ninterface ICheckboxOption {\n  value: any;\n  label: string;\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'styleguide-variables/styles/variables.scss';\n\n:host {\n    display: inline-block;\n\n    span {\n        @include label-01;\n        display: inline-block;\n        margin-bottom: 0.5rem;\n        user-select: none;\n    }\n    \n    app-radiobutton {\n        margin-bottom: $spacing-03;\n    }\n}\n\n@each $themeName, $theme in $themes {\n    .theme-#{$themeName} {\n        :host {\n            span {\n                color: map-get($theme, text-02);\n            }\n\n            &.disabled {\n                span {\n                    color: map-get($theme, disabled-02);\n                }\n            }\n        }\n    }\n}",
                    "styleUrl": "./radiobutton-group.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 42
            },
            "accessors": {
                "selectedOption": {
                    "name": "selectedOption",
                    "setSignature": {
                        "name": "selectedOption",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 13,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "selectedOption",
                        "type": "",
                        "returnType": "ICheckboxOption",
                        "line": 20
                    }
                }
            },
            "templateData": "<span>\n    <ng-content></ng-content>\n</span>\n<app-radiobutton\n    #radiobutton\n    *ngFor=\"let option of options\"\n    (stateChanged)=\"optionClicked($event)\"\n    [disabled]=\"disabled\"\n    [preSelected]=\"checkForPreSelection(option)\"\n    [option]=\"option\">\n</app-radiobutton>\n"
        },
        {
            "name": "TestButtonComponent",
            "id": "component-TestButtonComponent-ec886708e743c79c4a8bce2909c55b79",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n ><ng-content></ng-content></button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "description": "<p>What background color to use</p>\n",
                    "line": 24,
                    "type": "string"
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 18
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 30,
                    "type": "\"small\" | \"medium\" | \"large\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 37,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  ><ng-content></ng-content></button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class TestButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 39
                    }
                }
            }
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "ButtonComponent"
                        },
                        {
                            "name": "ButtonGroupComponent"
                        },
                        {
                            "name": "CheckboxComponent"
                        },
                        {
                            "name": "RadiobuttonComponent"
                        },
                        {
                            "name": "RadiobuttonGroupComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\r\n  production: true\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\r\n  production: false\r\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "literal type"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => {\n  const returnFunction = ({\n    component: Button,\n    moduleMetadata: {\n      declarations: [Button]\n    },\n    props: args,\n    template: `\n      <storybook-button\n        [backgroundColor]=\"backgroundColor\"\n        [primary]=\"primary\"\n        [size]=\"size\"\n        (click)=\"onClick($event)\"\n      >\n        test123\n      </storybook-button>`\n  });\n  console.log('DEBUG:', args);\n  return returnFunction;\n}"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  component: Header,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  component: Page,\n  props: args,\n})"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "buttonSize",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"default\" | \"inline\" | \"small\"",
                "file": "src/app/components/button/button.component.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "buttonType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"primary\" | \"secondary\" | \"tertiary\" | \"ghost\" | \"danger\"",
                "file": "src/app/components/button/button.component.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "CheckboxState",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"checked\" | \"intermediate\" | \"unchecked\"",
                "file": "src/app/components/checkbox/checkbox.component.ts",
                "description": "",
                "kind": 168
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "literal type"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  production: true\r\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  production: false\r\n}"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => {\n  const returnFunction = ({\n    component: Button,\n    moduleMetadata: {\n      declarations: [Button]\n    },\n    props: args,\n    template: `\n      <storybook-button\n        [backgroundColor]=\"backgroundColor\"\n        [primary]=\"primary\"\n        [size]=\"size\"\n        (click)=\"onClick($event)\"\n      >\n        test123\n      </storybook-button>`\n  });\n  console.log('DEBUG:', args);\n  return returnFunction;\n}"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  component: Header,\n  props: args,\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  component: Page,\n  props: args,\n})"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "src/app/components/button/button.component.ts": [
                {
                    "name": "buttonSize",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"default\" | \"inline\" | \"small\"",
                    "file": "src/app/components/button/button.component.ts",
                    "description": "",
                    "kind": 168
                },
                {
                    "name": "buttonType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"primary\" | \"secondary\" | \"tertiary\" | \"ghost\" | \"danger\"",
                    "file": "src/app/components/button/button.component.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "src/app/components/checkbox/checkbox.component.ts": [
                {
                    "name": "CheckboxState",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"checked\" | \"intermediate\" | \"unchecked\"",
                    "file": "src/app/components/checkbox/checkbox.component.ts",
                    "description": "",
                    "kind": 168
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 2,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/button-group/button-group.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonGroupComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/components/checkbox/checkbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CheckboxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/app/components/radiobutton-group/radiobutton-group.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RadiobuttonGroupComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/components/radiobutton-group/radiobutton-group.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICheckboxOption",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/radiobutton/radiobutton.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RadiobuttonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/components/radiobutton/radiobutton.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICheckboxOption",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TestButtonComponent",
                "coveragePercent": 80,
                "coverageCount": "4/5",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}