# overall build environment and global vars
build=npm
targetRegion=eu-central-1
AWSAccountId=628182390609
EcsCluster=storybook
uploadFolder=storybook-static

# Build NPM function if "true" all vars need to be filled, otherwise "false"
npmBuild=true
npmPrepare=npm cache clean --force && npm install
npmBuildParam=npm run build-storybook

# Build python function if "true" all vars need to be filled, otherwise "false"
# The command builds a production version of the project with the minimum required dependencies.
# It will be deployed on AWS. Since we use a slim Alpine docker image, we need to install a couple
# of additional libs. They will be removed right after the project installation.
pythonBuild=false
pythonBuildParam=
pythonRUN=

# Conda Environment function if "true" all vars need to be filled, otherwise "false"
condaBuild=false
programmFolder=
condaEnvName=

# s3Deployment function if "true" all vars need to be filled, otherwise "false"
s3Deploy=true
targetBucket=smsdig-storybook-coe-webdev

# fargateDeployment function if "true" all vars need to be filled, otherwise "false"
fargateDeploy=false

# Kubernetes deployment function if "true" all vars need to be filled, otherwise "false"
k8sDeploy=false
namespace=
dockerbuild=

# Notification
slack=false
slackChannel=

# Unit tests
# The tests are run on a Jenkins machine that is a full Linux instance with python onboard.
# Before starting, we need to install the project, this time with the dev dependencies: they include
# test suits, linters, etc. The tests must generate a JUnit-compatible XML report.
unitTest=false
unitTestCommand=cd ppq-db-update-util; \
                docker-compose -f docker-compose.test.yml up --build --abort-on-container-exit; \
                sudo chmod -R 777 ./build;
testPath=tests

# Linters
runLinter=false
## Run the linter - the output line is necessary - the name of the file ".out" need to be same like the chosen linter
## example: build/test-reports/pyLint.out
linterCommand=cd ppq-db-update-util; \
              python -m pip install --user pylint==2.6.0; \
              python -m pylint -f parseable -j 0 --exit-zero src > build/test-reports/pyLint.out

## Choose the right linter, multiple choice possible, please "," separated -> https://github.com/jenkinsci/warnings-ng-plugin/blob/master/SUPPORTED-FORMATS.md
linter=pyLint
## base is always the project folder ${serviceName}/ *** Filename will be "<linterName>.out" ! please don't add the name manually !
## example: build/test-reports/pyLint.out
linterResultsPath=build/test-reports/

